#pragma once
/******************************************************************************/
/******************************************************************************/
void ClientSendVersion(Connection &conn);
bool ServerRecvVersion(File &f);
void ServerSendVersion(Connection &conn, bool ok);
bool ClientRecvVersion(File &f);
void ClientSendLogin(Connection &conn, C Str &email, C Str &pass, C Str &license_key, OS_VER os_ver);
void ServerRecvLogin(File &f, Str &email, UID &pass, Str &license_key, OS_VER &os_ver);
void ServerSendLogin(Connection &conn, LOGIN_RESULT result, USER_ACCESS access);
void ClientRecvLogin(File &f, LOGIN_RESULT &result, USER_ACCESS &access);
void ClientSendRegister(Connection &conn, C Str &email, C Str &pass, C Str &name);
void ServerRecvRegister(File &f, Str &email, UID &pass, Str &name);
void ServerSendRegister(Connection &conn, REGISTER_RESULT result);
void ClientRecvRegister(File &f, REGISTER_RESULT &result);
void ClientSendForgotPass(Connection &conn, C Str &email);
void ServerRecvForgotPass(File &f, Str &email);
void ServerSendForgotPass(Connection &conn, FORGOT_PASS_RESULT result);
void ClientRecvForgotPass(File &f, FORGOT_PASS_RESULT &result);
void ClientSendChangePass(Connection &conn, C Str &email, C Str &new_pass, C Str &old_pass, uint change_pass_key = 0);
void ServerRecvChangePass(File &f, Str &email, UID &new_pass, UID &old_pass, uint &change_pass_key);
void ServerSendChangePass(Connection &conn, CHANGE_PASS_RESULT result);
void ClientRecvChangePass(File &f, CHANGE_PASS_RESULT &result);
void ClientSendLicenseKey(Connection &conn, C Str &license_key);
void ServerRecvLicenseKey(File &f, Str &license_key);
void ClientSendProjectsListRequest(Connection &conn);
void ServerSendProjectsList(Connection &conn, Memx<Project> &projects);
bool ClientRecvProjectsList(File &f, Memx<Project> &projects);
void ClientSendProjectOpen(Connection &conn, C UID &proj_id, C Str &proj_name);
void ServerRecvProjectOpen(File &f, UID &proj_id, Str &proj_name);
void ClientSendGetProjectData(Connection &conn);
bool ServerSendProjectData(Connection &conn, Project &project);
bool ClientRecvProjectData(File &f, Project &project);
void ClientSendProjectSettings(Connection &conn, Project &project);
bool ServerRecvProjectSettings(File &f, Project &project);
void ServerWriteProjectSettings(File &f, Project &project);
bool ClientRecvProjectSettings(File &f, Project &project);
void ClientSendNewElm(Connection &conn, Elm &elm);
void ServerRecvNewElm(File &f, Elm &elm);
void ServerWriteNewElm(File &f, Elm &elm, C UID &proj_id);
void ClientRecvNewElm(File &f, Elm &elm, UID &proj_id);
void ClientSendRenameElm(Connection &conn, C UID &elm_id, C Str &name, C TimeStamp &name_time);
void ServerRecvRenameElm(File &f, UID &elm_id, Str &name, TimeStamp &name_time);
void ServerWriteRenameElm(File &f, C UID &elm_id, C Str &name, C TimeStamp &name_time, C UID &proj_id);
void ClientRecvRenameElm(File &f, UID &elm_id, Str &name, TimeStamp &name_time, UID &proj_id);
void ClientSendSetElmParent(Connection &conn, C UID &elm_id, C UID &parent_id, C TimeStamp &parent_time);
void ServerRecvSetElmParent(File &f, UID &elm_id, UID &parent_id, TimeStamp &parent_time);
void ServerWriteSetElmParent(File &f, C UID &elm_id, C UID &parent_id, C TimeStamp &parent_time, C UID &proj_id);
void ClientRecvSetElmParent(File &f, UID &elm_id, UID &parent_id, TimeStamp &parent_time, UID &proj_id);
void ClientSendRemoveElms(Connection &conn, Memc<UID> &elm_ids, bool removed, C TimeStamp &removed_time);
void ServerRecvRemoveElms(File &f, Memc<UID> &elm_ids, bool &removed, TimeStamp &removed_time);
void ServerWriteRemoveElms(File &f, Memc<UID> &elm_ids, bool removed, C TimeStamp &removed_time, C UID &proj_id);
void ClientRecvRemoveElms(File &f, Memc<UID> &elm_ids, bool &removed, TimeStamp &removed_time, UID &proj_id);
void ClientSendPublishElms(Connection &conn, Memc<UID> &elm_ids, sbyte publish, sbyte publish_mobile, C TimeStamp &publish_time);
void ServerRecvPublishElms(File &f, Memc<UID> &elm_ids, sbyte &publish, sbyte &publish_mobile, TimeStamp &publish_time);
void ServerWritePublishElms(File &f, Memc<UID> &elm_ids, sbyte publish, sbyte publish_mobile, C TimeStamp &publish_time, C UID &proj_id);
void ClientRecvPublishElms(File &f, Memc<UID> &elm_ids, sbyte &publish, sbyte &publish_mobile, TimeStamp &publish_time, UID &proj_id);
void ClientSendGetElmNames(Connection &conn, Memc<UID> &elm_ids);
void ServerRecvGetElmNames(File &f, Memc<UID> &elm_ids);
void ServerSendGetElmNames(Connection &conn, Memc<ElmName> &elm_names, C UID &proj_id);
void ClientRecvGetElmNames(File &f, Memc<ElmName> &elm_names, UID &proj_id);
void ClientSendGetTextures(Connection &conn, Memc<UID> &tex_ids);
void ServerRecvGetTextures(File &f, Memc<UID> &tex_ids);
bool ClientWriteSetTexture(File &f, C UID &tex_id, File &tex_data);
void ServerRecvSetTexture(File &f, UID &tex_id, File &cmpr_tex_data);
void ServerWriteSetTexture(File &f, C UID &tex_id, File &cmpr_tex_data, C UID &proj_id);
bool ClientRecvSetTexture(File &f, UID &tex_id, File &tex_data, UID &proj_id);
void ClientSendGetElmShort(Connection &conn, Memc<UID> &elm_ids);
void ServerRecvGetElmShort(File &f, Memc<UID> &elm_ids);
void ClientSendSetElmShort(Connection &conn, Elm &elm, C Project &proj);
bool ServerRecvSetElmShort(File &f, Elm &elm, File &data);
void ServerWriteSetElmShort(File &f, Elm &elm, C Project &proj);
bool ClientRecvSetElmShort(File &f, Elm &elm, File &data, UID &proj_id);
void ClientSendGetElmLong(Connection &conn, Memc<UID> &elm_ids);
void ServerRecvGetElmLong(File &f, Memc<UID> &elm_ids);
void ClientWriteSetElmLong(File &elm_file, File &data_file, Elm &elm, Project &proj, bool &compress);
bool ServerRecvSetElmLong(File &f, Elm &elm, File &data, File &extra);
void ServerWriteSetElmLong(File &f, Elm &elm, C Project &proj);
bool ClientRecvSetElmLong(File &f, Elm &elm, File &data, File &extra, UID &proj_id);
void ClientWriteSetElmFull(File &elm_file, File &data_file, Elm &elm, Project &proj, bool &compress);
bool ServerRecvSetElmFull(File &f, Elm &elm, File &data, File &extra);
void ServerWriteSetElmFull(File &f, Elm &elm, C Project &proj);
bool ClientRecvSetElmFull(File &f, Elm &elm, File &data, File &extra, UID &proj_id);
void ClientSendGetWorldVer(Connection &conn, C UID &world_id);
void ServerRecvGetWorldVer(File &f, UID &world_id);
void ServerSendGetWorldVer(Connection &conn, WorldVer *world_ver, C UID &world_id, C UID &proj_id);
void ClientRecvGetWorldVer(File &f, WorldVer &world_ver, UID &world_id, UID &proj_id);
void ClientSendGetWorldAreas(Connection &conn, C UID &world_id, Memc<AreaSync> &areas);
void ServerRecvGetWorldAreas(File &f, UID &world_id, Memc<AreaSync> &areas);
void WriteSetWorldArea(File &f, C UID &world_id, C VecI2 &area_xy, byte area_sync_flag, C AreaVer &ver, C Heightmap *hm, C Memc<ObjData> &objs, C Str &edit_path);
bool RecvSetWorldArea(File &f, UID &world_id, VecI2 &area_xy, byte &area_sync_flag, AreaVer &ver, Heightmap &hm, Memc<ObjData> &objs, C Str &game_path, C Str &edit_path);
void ClientWriteSetWorldArea(File &elm, File &data, C UID &world_id, C VecI2 &area_xy, byte area_sync_flag, C AreaVer &ver, C Heightmap *hm);
bool ServerRecvSetWorldArea(File &f, UID &world_id, VecI2 &area_xy, byte &area_sync_flag, AreaVer &ver, Heightmap &hm, C Str &game_path, C Str &edit_path);
void ServerSendSetWorldArea(Connection &conn, C UID &world_id, C VecI2 &area_xy, byte area_sync_flag, C AreaVer &ver, C Heightmap *hm, Memc<ObjData> &objs, C UID &proj_id, C Str &edit_path);
bool ClientRecvSetWorldArea(File &f, UID &world_id, VecI2 &area_xy, byte &area_sync_flag, AreaVer &ver, Heightmap &hm, Memc<ObjData> &objs, UID &proj_id, C Str &game_path, C Str &edit_path);
void ClientWriteSetWorldObjs(File &elm, File &data, C UID &world_id, C VecI2 &area_xy, Memc<ObjData> &objs, C Str &edit_path);
bool ServerRecvSetWorldObjs(File &f, UID &world_id, VecI2 &area_xy, Memc<ObjData> &objs, C Str &edit_path);
void ServerWriteSetWorldObjs(File &f, C UID &world_id, C VecI2 &area_xy, Memc<ObjData> &objs, C Str &edit_path, C UID &proj_id);
bool ClientRecvSetWorldObjs(File &f, UID &world_id, VecI2 &area_xy, Memc<ObjData> &objs, C Str &edit_path, UID &proj_id);
void ClientSendGetWorldWaypoints(Connection &conn, C UID &world_id, Memc<UID> &waypoints);
void ServerRecvGetWorldWaypoints(File &f, UID &world_id, Memc<UID> &waypoints);
void ClientSendSetWorldWaypoint(Connection &conn, C UID &world_id, C UID &waypoint_id, C Version &waypoint_ver, EditWaypoint &waypoint);
bool ServerRecvSetWorldWaypoint(File &f, UID &world_id, UID &waypoint_id, Version &waypoint_ver, EditWaypoint &waypoint);
void ServerWriteSetWorldWaypoint(File &f, C UID &world_id, C UID &waypoint_id, C Version &waypoint_ver, EditWaypoint &waypoint, C UID &proj_id);
bool ClientRecvSetWorldWaypoint(File &f, UID &world_id, UID &waypoint_id, Version &waypoint_ver, EditWaypoint &waypoint, UID &proj_id);
void ClientSendGetWorldLakes(Connection &conn, C UID &world_id, Memc<UID> &lakes);
void ServerRecvGetWorldLakes(File &f, UID &world_id, Memc<UID> &lakes);
void ClientSendSetWorldLake(Connection &conn, C UID &world_id, C UID &lake_id, C Version &lake_ver, Lake &lake);
bool ServerRecvSetWorldLake(File &f, UID &world_id, UID &lake_id, Version &lake_ver, Lake &lake);
void ServerWriteSetWorldLake(File &f, C UID &world_id, C UID &lake_id, C Version &lake_ver, Lake &lake, C UID &proj_id);
bool ClientRecvSetWorldLake(File &f, UID &world_id, UID &lake_id, Version &lake_ver, Lake &lake, UID &proj_id);
void ClientSendGetWorldRivers(Connection &conn, C UID &world_id, Memc<UID> &rivers);
void ServerRecvGetWorldRivers(File &f, UID &world_id, Memc<UID> &rivers);
void ClientSendSetWorldRiver(Connection &conn, C UID &world_id, C UID &river_id, C Version &river_ver, River &river);
bool ServerRecvSetWorldRiver(File &f, UID &world_id, UID &river_id, Version &river_ver, River &river);
void ServerWriteSetWorldRiver(File &f, C UID &world_id, C UID &river_id, C Version &river_ver, River &river, C UID &proj_id);
bool ClientRecvSetWorldRiver(File &f, UID &world_id, UID &river_id, Version &river_ver, River &river, UID &proj_id);
void ClientSendGetMiniMapVer(Connection &conn, C UID &mini_map_id);
void ServerRecvGetMiniMapVer(File &f, UID &mini_map_id);
void ServerSendGetMiniMapVer(Connection &conn, MiniMapVer *mini_map_ver, C UID &mini_map_id, C UID &proj_id);
void ClientRecvGetMiniMapVer(File &f, MiniMapVer &mini_map_ver, UID &mini_map_id, UID &proj_id);
void ClientSendGetMiniMapImages(Connection &conn, C UID &mini_map_id, Memc<VecI2> &images);
void ServerRecvGetMiniMapImages(File &f, UID &mini_map_id, Memc<VecI2> &images);
void ClientSendSetMiniMapSettings(Connection &conn, C UID &mini_map_id, C Game::MiniMap::Settings &settings, C TimeStamp &settings_time);
bool ServerRecvSetMiniMapSettings(File &f, UID &mini_map_id, Game::MiniMap::Settings &settings, TimeStamp &settings_time);
void ServerWriteSetMiniMapSettings(File &f, C UID &mini_map_id, C Game::MiniMap::Settings &settings, C TimeStamp &settings_time, C UID &proj_id);
bool ClientRecvSetMiniMapSettings(File &f, UID &mini_map_id, Game::MiniMap::Settings &settings, TimeStamp &settings_time, UID &proj_id);
void ServerSendSetMiniMapImage(Connection &conn, C UID &mini_map_id, C VecI2 &image_xy, C TimeStamp &image_time, File &cmpr_image_data, C UID &proj_id);
bool ClientRecvSetMiniMapImage(File &f, UID &mini_map_id, VecI2 &image_xy, TimeStamp &image_time, File &image_data, UID &proj_id);
void ClientWriteSetMiniMapImage(File &elm, File &data, C UID &mini_map_id, C VecI2 &image_xy, C TimeStamp &image_time, File &image_data);
bool ServerRecvSetMiniMapImage(File &f, UID &mini_map_id, VecI2 &image_xy, TimeStamp &image_time, bool &image_is, File &cmpr_image_data);
void ClientSendGetWorldMapVer(Connection &conn, C UID &mini_map_id);
void ServerRecvGetWorldMapVer(File &f, UID &mini_map_id);
void ServerSendGetWorldMapVer(Connection &conn, WorldMapVer *mini_map_ver, C UID &mini_map_id, C UID &proj_id);
void ClientRecvGetWorldMapVer(File &f, WorldMapVer &mini_map_ver, UID &mini_map_id, UID &proj_id);
void ClientSendGetWorldMapImages(Connection &conn, C UID &mini_map_id, Memc<VecI2> &images);
void ServerRecvGetWorldMapImages(File &f, UID &mini_map_id, Memc<VecI2> &images);
void ClientSendSetWorldMapSettings(Connection &conn, C UID &mini_map_id, C Game::WorldMap::Settings &settings, C TimeStamp &settings_time);
bool ServerRecvSetWorldMapSettings(File &f, UID &mini_map_id, Game::WorldMap::Settings &settings, TimeStamp &settings_time);
void ServerWriteSetWorldMapSettings(File &f, C UID &mini_map_id, C Game::WorldMap::Settings &settings, C TimeStamp &settings_time, C UID &proj_id);
bool ClientRecvSetWorldMapSettings(File &f, UID &mini_map_id, Game::WorldMap::Settings &settings, TimeStamp &settings_time, UID &proj_id);
void ServerSendSetWorldMapImage(Connection &conn, C UID &mini_map_id, C VecI2 &image_xy, C TimeStamp &image_time, File &cmpr_image_data, C UID &proj_id);
bool ClientRecvSetWorldMapImage(File &f, UID &mini_map_id, VecI2 &image_xy, TimeStamp &image_time, File &image_data, UID &proj_id);
void ClientWriteSetWorldMapImage(File &elm, File &data, C UID &mini_map_id, C VecI2 &image_xy, C TimeStamp &image_time, File &image_data);
bool ServerRecvSetWorldMapImage(File &f, UID &mini_map_id, VecI2 &image_xy, TimeStamp &image_time, bool &image_is, File &cmpr_image_data);
int Compare(C ElmTypeVer &a, C ElmTypeVer &b);
int Compare(C ElmTypeVer &a, C UID &id);
void ClientSendGetCodeVer(Connection &conn, Memc<ElmTypeVer> &elms);
bool ServerRecvGetCodeVer(File &f, Memc<ElmTypeVer> &elms);
void ServerSendSetCodeData(Connection &conn, C Memc<ElmCodeData> &elms, C UID &proj_id);
bool ClientRecvSetCodeData(File &f, Memc<ElmCodeData> &elms, UID &proj_id);
void ClientSendSetCodeData(Connection &conn, C Memc<ElmCodeData> &elms);
bool ServerRecvSetCodeData(File &f, Memc<ElmCodeData> &elms);
void ServerSendCodeSyncStatus(Connection &conn, C Memc<ElmCodeBase> &elms, bool resync, C UID &proj_id);
bool ClientRecvCodeSyncStatus(File &f, Memc<ElmCodeBase> &elms, bool &resync, UID &proj_id);
/******************************************************************************/
